== SF Food Trucks (Front-End Track)

App Hosted Here: https://whispering-savannah-5479.herokuapp.com

= Assignment

Create a service that tells the user what types of food trucks might be found near a specific location on a map.

The data is available on DataSF: Food Trucks


= Approach

I decided to write my app in AngularJS (despite it being a heavier framework) mainly because I wanted to use the tool that would best allow me to write a production-grade test suite for the app. Angular's built-in Jasmine unit testing framework made it easy to set up mocks and monitor the behavior of http requests and timeouts - allowing me to comprehensively test my controllers and services in isolation. I also set up a Protractor-based E2E test routine to guarantee the app's UI behavior.

For mapping I used the Leaflet JavaScript Library. Users can search for nearby trucks either by dragging the map to center the target pin or by entering an address into the search bar. One feature that was particuarly fun to implement was wiring up the components with bidirectional bindings via the API - i.e. the address bar will update in real time as the user moves the map and the map repositions itself if a user types in the address. Clicking on a truck's location pin reveals more detais in the listings sidebar.

Another aspect of the project I wanted to focus on was intelligent error handling of network requests on the client side. Since the app's UI so heavily relies on API requests, I set up a global http-notifications singleton that is utilized during AJAX requests to report network status to the user. If a request fails due to loss of internet connectivity, the app displays a message to the end user and retries the request in the background after 8 seconds.

I opted to use the Rails-API framework to set up a basic backend and then scraped the Food Truck data set from DataSF. While I could have had my client app talk directly to the DataSF JSON endpoint, setting up my own backend gave me much more freedom to geocode the data set and customize the API behavior for my client app.

The app is tested & built using Grunt and hosted on Heroku.
 

= Getting Started

From the root folder run 'rails s' to start the API server. The Client App code is organized in the client folder. Running 'grunt serve' in this folder will spin up the app on localhost:9000. API requests are proxied over from the rails app on localhost:3000. If you are missing dependencies run 'bundle install' in the rails folder and 'npm install' + 'bower install' in the client folder. Use 'grunt test' run the test suites (note that selenium-webdriver is required for the automated browser tests).

= Future Todos

- Write a cron script to routinely scrape DataSF
- Implement typeahead on the search bar
- Improved geobounding on the food truck results and use pagination when there are more than 20 nearby results


